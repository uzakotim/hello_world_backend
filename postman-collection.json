{
  "info": {
    "name": "Tomatoes API - Render",
    "description": "Complete API testing collection for the Tomatoes API deployed on Render",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://hello-world-backend-uzakotim.onrender.com",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Basic Endpoints",
      "item": [
        {
          "name": "API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tomatoes CRUD",
      "item": [
        {
          "name": "Create Tomato",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    pm.expect(pm.response.json().success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains created tomato data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('_id');",
                  "    pm.expect(responseJson.data.name).to.eql('Cherry Tomato');",
                  "    ",
                  "    // Store the ID for subsequent tests",
                  "    pm.collectionVariables.set('tomatoId', responseJson.data._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Cherry Tomato\",\n  \"variety\": \"Sweet 100\",\n  \"price\": 4.99,\n  \"description\": \"Small, sweet tomatoes perfect for snacking\",\n  \"inStock\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tomatoes",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Tomatoes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson).to.have.property('count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tomatoes",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes"]
            }
          },
          "response": []
        },
        {
          "name": "Get Tomato by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains tomato data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tomatoes/{{tomatoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes", "{{tomatoId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Tomato",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Tomato was updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.price).to.eql(5.99);",
                  "    pm.expect(responseJson.data.inStock).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 5.99,\n  \"inStock\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tomatoes/{{tomatoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes", "{{tomatoId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Tomato",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Tomato was deleted', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tomatoes/{{tomatoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes", "{{tomatoId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Search Endpoints",
      "item": [
        {
          "name": "Search by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson).to.have.property('count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tomatoes/search/name/Cherry Tomato",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes", "search", "name", "Cherry Tomato"]
            }
          },
          "response": []
        },
        {
          "name": "Search by Variety",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search response structure is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson).to.have.property('count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tomatoes/search/variety/Sweet 100",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes", "search", "variety", "Sweet 100"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Create Tomato - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message is present', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Incomplete Tomato\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tomatoes",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes"]
            }
          },
          "response": []
        },
        {
          "name": "Get Non-existent Tomato",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.error).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tomatoes/nonexistent123",
              "host": ["{{baseUrl}}"],
              "path": ["tomatoes", "nonexistent123"]
            }
          },
          "response": []
        },
        {
          "name": "Unknown Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/unknown-endpoint",
              "host": ["{{baseUrl}}"],
              "path": ["unknown-endpoint"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}

